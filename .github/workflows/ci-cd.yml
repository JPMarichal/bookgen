name: BookGen CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: jpmarichal/bookgen

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-xdist flake8 black

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check src || true

    - name: Run tests
      run: |
        # Create tests directory if it doesn't exist
        mkdir -p tests
        # Run pytest if tests exist, otherwise skip
        # Skip slow tests (performance/stress) and run tests in parallel with pytest-xdist
        # This significantly reduces test execution time from ~25min to ~5-10min
        if [ -d "tests" ] && [ "$(ls -A tests/*.py 2>/dev/null)" ]; then
          pytest tests/ -m "not slow" -n auto --cov=src --cov-report=xml --cov-report=term
        else
          echo "No tests found, skipping test execution"
          # Create a dummy coverage file for upload
          echo '<?xml version="1.0" ?><coverage version="1.0"><packages/></coverage>' > coverage.xml
        fi

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # Only build on push to main/develop or on releases
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

    - name: Image digest
      run: echo "Image pushed with digest ${{ steps.build.outputs.digest }}"

  deploy-to-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          set -e
          
          echo "üöÄ Starting deployment to production..."
          
          cd /opt/bookgen || { echo "‚ùå Directory /opt/bookgen not found"; exit 1; }
          
          # Backup current deployment state
          echo "üì¶ Creating backup..."
          BACKUP_NAME="bookgen_backup_$(date +%Y%m%d_%H%M%S)"
          docker-compose -f docker-compose.prod.yml down || true
          
          # Pull latest image
          echo "‚¨áÔ∏è  Pulling latest image..."
          docker pull ghcr.io/jpmarichal/bookgen:latest
          
          # Update environment file (preserve existing secrets, only update structure)
          echo "üîß Updating environment configuration..."
          if [ ! -f .env.production ]; then
            echo "‚ö†Ô∏è  Creating new .env.production file"
            cat > .env.production << 'EOF'
          ENV=production
          DEBUG=false
          OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-your_api_key_here}
          OPENROUTER_MODEL=qwen/qwen-2.5-72b-instruct
          SITE_URL=${SITE_URL:-https://bookgen.yourdomain.com}
          SITE_TITLE=BookGen - Generador Autom√°tico de Biograf√≠as
          DATABASE_URL=sqlite:///./data/bookgen_production.db
          LOG_LEVEL=INFO
          MAX_CONCURRENT_GENERATIONS=3
          CHAPTERS_NUMBER=20
          TOTAL_WORDS=51000
          STORAGE_PATH=/app/data
          OUTPUT_PATH=/app/docx
          WORKER_POOL_SIZE=2
          EOF
          fi
          
          # Start new deployment
          echo "üö¢ Starting services..."
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          echo "‚è≥ Waiting for services to start (30s)..."
          sleep 30
          
          # Health check with retry logic
          echo "üè• Performing health check..."
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -s http://localhost:8000/health > /dev/null; then
              echo "‚úÖ Health check passed!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è  Health check failed, retrying ($RETRY_COUNT/$MAX_RETRIES)..."
                sleep 10
              else
                echo "‚ùå Health check failed after $MAX_RETRIES attempts"
                echo "üîÑ Rolling back to previous deployment..."
                docker-compose -f docker-compose.prod.yml down
                # Restore would happen here if we had the previous image tagged
                exit 1
              fi
            fi
          done
          
          # Cleanup old images
          echo "üßπ Cleaning up old images..."
          docker image prune -f
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Application available at: http://localhost:8000"

    - name: Verify deployment
      run: |
        echo "Deployment to production completed"
        echo "Application should be available at: https://${{ secrets.SITE_URL }}"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment succeeded"
        else
          echo "‚ùå Deployment failed - check logs for details"
        fi

  notify:
    needs: [test, build-and-push, deploy-to-production]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Check deployment status
      run: |
        echo "Workflow completed"
        echo "Test status: ${{ needs.test.result }}"
        echo "Build status: ${{ needs.build-and-push.result }}"
        echo "Deploy status: ${{ needs.deploy-to-production.result }}"
